
Opgave_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067c  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fc  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000332  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001352  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 51 00 	jmp	0xa2	; 0xa2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
*/


	int main(void)
	{
		DDRC  = 0x00; 	// Alle bit i Port C sættes som input
  80:	17 b8       	out	0x07, r1	; 7
		DDRB  = 0xFF;	// Alle bit i Port B sættes som output
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 b9       	out	0x04, r24	; 4
		PORTB = 0x00;	// Alle bit på Port B sættes til ”0”
  86:	15 b8       	out	0x05, r1	; 5

		while(1)	// Uendelig løkke
		{
			if (PINC & (0x01)) // Hvis Port C bit 0 er forbundet til +5v så..
  88:	30 9b       	sbis	0x06, 0	; 6
  8a:	03 c0       	rjmp	.+6      	; 0x92 <main+0x12>
			{
				PORTB |=  (1<<PB4);    	// PORTB.5 = high. Bit 4 = ”1”
  8c:	2c 9a       	sbi	0x05, 4	; 5
				PORTB &= ~(1<<PB4);    	// PORTB.5 = NOT PORTB.4. Bit 4 inverteres.		
  8e:	2c 98       	cbi	0x05, 4	; 5
  90:	01 c0       	rjmp	.+2      	; 0x94 <main+0x14>
			}
			else	      // Ellers, hvis Port C bit 0 er forbundet til GND så..
			{
				PORTB &= ~(1<<PB4);    	// PORTB.5 = NOT PORTB.4. Bit 4 inverteres.	
  92:	2c 98       	cbi	0x05, 4	; 5
				//PORTB |=  (1<<PB5);    	// PORTB.5 = high. Bit 5 = ”1”
				//PORTB &= ~(1<<PB5);    	// PORTB.5 = NOT PORTB.5. Bit 5 inverteres.
			}
			
			if (PINC & (0x02)) // Hvis Port C bit 0 er forbundet til +5v så..
  94:	31 9b       	sbis	0x06, 1	; 6
  96:	03 c0       	rjmp	.+6      	; 0x9e <main+0x1e>
			{
				PORTB |=  (1<<PB3);    	// PORTB.5 = high. Bit 5 = ”1”
  98:	2b 9a       	sbi	0x05, 3	; 5
				PORTB &= ~(1<<PB3);    	// PORTB.5 = NOT PORTB.5. Bit 5 inverteres.
  9a:	2b 98       	cbi	0x05, 3	; 5
  9c:	f5 cf       	rjmp	.-22     	; 0x88 <main+0x8>
			}
			else	      // Ellers, hvis Port C bit 0 er forbundet til GND så..
			{
				PORTB &= ~(1<<PB3);    	// PORTB.5 = NOT PORTB.5. Bit 5 inverteres.
  9e:	2b 98       	cbi	0x05, 3	; 5
  a0:	f3 cf       	rjmp	.-26     	; 0x88 <main+0x8>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
